{"ast":null,"code":"export default function makeFileChangeHandler(_ref) {\n  let {\n    key,\n    // setPreview,\n    setFieldValue,\n    setFieldError,\n    setFieldTouched,\n    maxFileSize = 1,\n    mimeErrorMessage = 'Images only please.',\n    fileTypeRegex = /^data:image\\/(\\w+);base64,/,\n    fileSizeErrorMessage = `File size cannot be more than ${maxFileSize}MB.`\n  } = _ref;\n  return e => {\n    e.persist();\n\n    if (!e.target.files.length) {\n      return setFieldValue(key, '');\n    }\n\n    setFieldTouched(key, true, false);\n    const file = e.target.files[0];\n    const fileSize = file.size / 1024 / 1024;\n\n    if (fileSize > maxFileSize) {\n      e.target.value = '';\n      return setFieldError(key, fileSizeErrorMessage);\n    }\n\n    const reader = new window.FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => {\n      const dataURI = reader.result;\n\n      if (!fileTypeRegex.test(dataURI)) {\n        return setFieldError(key, mimeErrorMessage);\n      } // setPreview(dataURI)\n\n\n      setFieldValue(key, dataURI);\n    };\n\n    reader.onerror = () => setFieldValue(key, '');\n  };\n}","map":{"version":3,"names":["makeFileChangeHandler","key","setFieldValue","setFieldError","setFieldTouched","maxFileSize","mimeErrorMessage","fileTypeRegex","fileSizeErrorMessage","e","persist","target","files","length","file","fileSize","size","value","reader","window","FileReader","readAsDataURL","onload","dataURI","result","test","onerror"],"sources":["/Users/dukkaayo/workspace/Dexter/dexter/src/utils/make-file-change-handler.js"],"sourcesContent":["export default function makeFileChangeHandler ({\n  key,\n  // setPreview,\n  setFieldValue,\n  setFieldError,\n  setFieldTouched,\n  maxFileSize = 1,\n  mimeErrorMessage = 'Images only please.',\n  fileTypeRegex = /^data:image\\/(\\w+);base64,/,\n  fileSizeErrorMessage = `File size cannot be more than ${maxFileSize}MB.`\n}) {\n  return e => {\n    e.persist()\n\n    if (!e.target.files.length) {\n      return setFieldValue(key, '')\n    }\n\n    setFieldTouched(key, true, false)\n\n    const file = e.target.files[0]\n\n    const fileSize = file.size / 1024 / 1024\n\n    if (fileSize > maxFileSize) {\n      e.target.value = ''\n\n      return setFieldError(key, fileSizeErrorMessage)\n    }\n\n    const reader = new window.FileReader()\n\n    reader.readAsDataURL(file)\n\n    reader.onload = () => {\n      const dataURI = reader.result\n\n      if (!fileTypeRegex.test(dataURI)) {\n        return setFieldError(key, mimeErrorMessage)\n      }\n\n      // setPreview(dataURI)\n\n      setFieldValue(key, dataURI)\n    }\n\n    reader.onerror = () => setFieldValue(key, '')\n  }\n}\n"],"mappings":"AAAA,eAAe,SAASA,qBAAT,OAUZ;EAAA,IAV4C;IAC7CC,GAD6C;IAE7C;IACAC,aAH6C;IAI7CC,aAJ6C;IAK7CC,eAL6C;IAM7CC,WAAW,GAAG,CAN+B;IAO7CC,gBAAgB,GAAG,qBAP0B;IAQ7CC,aAAa,GAAG,4BAR6B;IAS7CC,oBAAoB,GAAI,iCAAgCH,WAAY;EATvB,CAU5C;EACD,OAAOI,CAAC,IAAI;IACVA,CAAC,CAACC,OAAF;;IAEA,IAAI,CAACD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeC,MAApB,EAA4B;MAC1B,OAAOX,aAAa,CAACD,GAAD,EAAM,EAAN,CAApB;IACD;;IAEDG,eAAe,CAACH,GAAD,EAAM,IAAN,EAAY,KAAZ,CAAf;IAEA,MAAMa,IAAI,GAAGL,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;IAEA,MAAMG,QAAQ,GAAGD,IAAI,CAACE,IAAL,GAAY,IAAZ,GAAmB,IAApC;;IAEA,IAAID,QAAQ,GAAGV,WAAf,EAA4B;MAC1BI,CAAC,CAACE,MAAF,CAASM,KAAT,GAAiB,EAAjB;MAEA,OAAOd,aAAa,CAACF,GAAD,EAAMO,oBAAN,CAApB;IACD;;IAED,MAAMU,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf;IAEAF,MAAM,CAACG,aAAP,CAAqBP,IAArB;;IAEAI,MAAM,CAACI,MAAP,GAAgB,MAAM;MACpB,MAAMC,OAAO,GAAGL,MAAM,CAACM,MAAvB;;MAEA,IAAI,CAACjB,aAAa,CAACkB,IAAd,CAAmBF,OAAnB,CAAL,EAAkC;QAChC,OAAOpB,aAAa,CAACF,GAAD,EAAMK,gBAAN,CAApB;MACD,CALmB,CAOpB;;;MAEAJ,aAAa,CAACD,GAAD,EAAMsB,OAAN,CAAb;IACD,CAVD;;IAYAL,MAAM,CAACQ,OAAP,GAAiB,MAAMxB,aAAa,CAACD,GAAD,EAAM,EAAN,CAApC;EACD,CApCD;AAqCD"},"metadata":{},"sourceType":"module"}